[{"/Users/maymt/Desktop/mvp/src/pages/App.js":"1","/Users/maymt/Desktop/mvp/src/components/Navbar.js":"2"},{"size":16846,"mtime":1608593745320,"results":"3","hashOfConfig":"4"},{"size":1070,"mtime":1608593745310,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"3za7rl",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/maymt/Desktop/mvp/src/pages/App.js",["12","13","14","15","16","17"],"import React, { useState, useEffect } from 'react';\nimport { CardContent, Grid , Card, Typography} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {FilterList, Receipt, Close} from '@material-ui/icons';\nimport axios from 'axios';\nimport MUIDataTable from \"mui-datatables\";\nimport Navbar from  '../components/Navbar';\nimport moment from 'moment';\n\n\n\nconst baseUrl = \"http://localhost:3001/\";\n// const baseUrl = \"nobunaga:9999/apis_melon/data_despacho\";\n\nconst urlGuardar=\"http://10.175.3.134:9999/apis_melon/ns_simulador/insertar/\";\nconst urlSelect=\"http://10.175.3.134:9999/apis_melon/ns_simulador/select\";\n\n\nconst columnas = [\n  { name: 'Fecha', label: 'Fecha', options: { filter: false, sort: true } },\n  { name: 'cliente', label: 'Rut', options: { filter: false, sort: false } }, \n  { name: 'cliente_name', label: 'Razón Social', options: { filter: false, sort: false } }, \n  { name: 'obra', label: 'Cod. Obra', options: { filter: false, sort: true } }, \n  { name: 'obra_name', label: 'Nombre Obra', options: { filter: false, sort: false } }, \n  { name: 'pedido', label: 'Pedido', options: { filter: false, sort: false } }, \n  // { name: 'tren_pedido', label: 'Tren Pedido', options: { filter: false, sort: false } }, \n  // { name: 'posicion_en_tren', label: 'Posición Tren', options: { filter: false, sort: false } }, \n  { name: 'Guia_despacho', label: 'Guía Despacho', options: { filter: false, sort: false } }, \n  { name: 'planta', label: 'Planta', options: { filter: false, sort: true } }, \n  // { name: 'producto_codigo', label: 'Cod. Producto', options: { filter: false, sort: false } }, \n  { name: 'producto', label: 'Producto', options: { filter: false, sort: false } }, \n  { name: 'm3', label: 'Volumen', options: { filter: true, sort: false, filterType: 'multiselect' } }, \n  // { name: 'camion', label: 'Camión', options: { filter: false, sort: false } }, \n  // { name: 'contratista', label: 'Contratista', options: { filter: false, sort: false }}, \n  { name: 'hora_solicitada_cliente_original', label: 'Hora Solicitada', options: { filter: false, sort: false } }, \n  { name: 'hora_solicitada_cliente_primer_despacho_de_tren', label: 'Hora 1er Tren', options: { filter: false, sort: false } }, \n  { name: 'hora_solicitada_cliente_corregida', label: 'Hora Corregida', options: { filter: false, sort: false } }, \n  { name: 'espaciamiento', label: 'Espaciamiento', options: { filter: false, sort: false } }, \n  // { name: 'tiempo_viaje_vuelta_proyectado', label: 'Tiempo Ida', options: { filter: false, sort: false } }, \n  // { name: 'tiempo_ida_vuelta_proyectado', label: 'Tiempo Vuelta', options: { filter: false, sort: false } }, \n  // { name: 'hora_tiquete', label: 'Hora Tiquete', options: { filter: false, sort: false } }, \n  // { name: 'hora_de_carga', label: 'Hora Inicio Carga', options: { filter: false, sort: false } }, \n  // { name: 'hora_fin_de_carga', label: 'Hora Fin Carga', options: { filter: false, sort: false } }, \n  // { name: 'hora_salida_de_planta', label: 'Hora Salida Planta', options: { filter: false, sort: false } }, \n  { name: 'hora_llegada_a_obra', label: 'Hora Llegada Obra', options: { filter: false, sort: false, filterType: 'multiselect'} }, \n  // { name: 'hora_inicio_descarga', label: 'Hora Inicio Descarga', options: { filter: false, sort: false } }, \n  { name: 'hora_salida_a_planta', label: ' Hora Salida Obra', options: { filter: false, sort: false } },\n  // { name: 'hora_llegada_a_planta', label: 'Hora Llegada Planta', options: { filter: false, sort: false } },\n  { name: 'direccion', label: 'Dirección', options: { filter: false, sort: false } }, \n  // { name: 'cuadrante', label: 'Cuadrante', options: { filter: false, sort: false } }, \n  // { name: 'anillo', label: 'Anillo', options: { filter: false, sort: false } }, \n  // { name: 'costo_produccion', label: 'Costo Producción', options: { filter: false, sort: false } }, \n  { name: 'codigo_remosion_pedido', label: 'Cod. Remosión Pedido', options: { filter: true, sort: false, filterType: 'multiselect' } },\n  { name: 'codigo_remosion_tren', label: 'Cod. Remosión Tren', options: { filter: false, sort: false } }, \n  { name: 'codigo_remosion_tren', label: 'Cod. Remosión Tren', options: { filter: false, sort: false } }, \n  { name: 'codigo_remosion_linea', label: 'Cod. Remosión Línea', options: { filter: false, sort: false } }, \n  { name: 'codigo_remosion_fuera_plazo', label: 'Cod. Remosión FP', options: { filter: false, sort: false, filterType: 'multiselect' } }, \n  // { name: 'm3_a_botadero', label: 'M3 Botadero', options: { filter: false, sort: false } }, \n  // { name: 'm3_a_redestino', label: 'M3 Redestino', options: { filter: false, sort: true } },\n  { name: 'puntual', label: '¿Puntual?', options: { filter: true, sort: false } }, \n  { name: 'atraso', label: 'Atraso', options: { filter: true, sort: false } }, \n  { name: 'estadia_esperada', label: 'Estadía Esperada', options: { filter: true, sort: false } }, \n  { name: 'estadia_real', label: 'Estadía Real', options: { filter: true, sort: false } },\n  { name: 'min_adicionales', label: 'Minutos Sobrestadía', options: { filter: true, sort: false } }, \n  // { name: 'min_diferencia', label: 'Total Minutos', options: { filter: true, sort: false } }, \n  // { name: 'tramos', label: 'Tramos', options: { filter: true, sort: false } }, \n  // { name: 'monto', label: 'Monto', options: { filter: true, sort: false } }\n];\n\n\n const options = {\n  rowsPerPage: 10,\n  filterType: 'textField',\n  download: 'false',\n  print: 'false',\n  search: 'false',\n  fixedColumns: 2\n };\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: 'left',\n    background: 'white',\n    paddingBottom: '20px',\n    alignContent: 'center'\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    width: 200,\n  },\n  button:{\n    fontSize: 14,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    margin: '20px'\n  },\n  card:{\n    textAlign: 'center',\n    padding: '10px',\n    margin: '20px'\n  },\n  texto:{\n      fontSize: 16,\n      textAlign: 'left',\n      fontWeight: 'medium'\n  },\n  titulo:{\n      fontWeight: 'bold',\n      fontSize: 22,\n      marginBottom: '10px'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [data, setData] = useState([]);\n  const [resumen, setResumen] = useState([]);\n  const [facturado, setFacturado] = useState([]);\n  \n  const [obraSeleccionado, setObraSeleccionado]=useState({ //Datos que se ponen en los inputs\n    fecha_inicio: \"\",\n    fecha_fin: \"\",\n    obra_oc: \"\"\n  })\n\n  const handleChange=e=>{\n    const {name, value}=e.target;\n    setObraSeleccionado(prevState=>({\n      ...prevState,\n      [name]: value\n    }));\n  }\n\n  const peticionGet=async()=>{\n    var hoy = moment().get('year')+\"-\"+(moment().get('month') + 1)+\"-\"+(moment().get('day') - 1);\n    hoy = moment(hoy, 'YYYY-MM-dd');\n    hoy = hoy._i;\n\n    var inicio = moment().subtract(1, 'months');\n    inicio = moment(inicio).get('year')+\"-\"+moment(inicio).get('month')+\"-\"+moment(inicio).get('day');\n    inicio = moment(inicio, 'YYYY-MM-dd');\n    inicio = inicio._i;\n    \n    await axios.get(baseUrl+\"datos\")\n    // await axios.get(baseUrl+\"/\"+inicio+\"/\"+hoy)\n    .then(response=>{\n      // console.log(response.data)\n      setData(response.data);\n      console.log(data);\n    }).catch(error=>{\n      console.log(error);\n    })\n    var resumen = [];\n    setResumen(resumen);\n  }\n\n  function filtrarDatos(data, fecha_inicio, fecha_fin, obra) { //filtra los datos por obra y fecha, genera los datos del resumen\n    let x;\n    \n    const rows = []; // pedidos de la obra y fechas seleccionadas\n    var resumen = []; // datos tabla resumenº\n\n    var adicionales_suma = 0; //suma de los minutos adicionales\n    var atraso_suma = 0; //suma de los minutos de atraso\n    var diferencia = 0; //diferencia entre atrasos y minutos adicionales.\n    var tramos = 0; // tramos de 15 minutos en la diferencia\n    var monto = 0; // monto que se debería facturar\n\n    var puntual = 0;\n    var atraso = 0;\n    var estadia_esperada = 0;\n    var estadia_real = 0;\n    var min_adicionales = 0;\n    var min_diferencia = 0;\n\n    for (x in data){\n      if (data[x][3] !== null) {\n        \n        if ((data[x][3].includes(obra) && data[x][0] >= fecha_inicio && data[x][0] <= fecha_fin) || (data[x][3].includes(obra) && data[x][0] === fecha_inicio)) {\n          // console.log(data[x]);\n          // data[x].splice(6,1);\n          // console.log(data[x]);\n          rows.push(data[x]);\n          \n          var solicitada = data[x][10]; //hora solicitada original.\n          var llegada = data[x][14]; //hora de llegada a la obra.\n          var salida = data[x][15]; // hora de salida de la obra.\n          estadia_esperada = 15 + data[x][9] * 6 + 10; //estadia esperada calculada en base al volumen pedido + los 15 minutos de posicionamiento y 10 min de lavado.\n\n          if (solicitada !== null && llegada !== null && salida !== null) {\n            solicitada = parseInt(solicitada.substring(0,2)) * 3600 + parseInt(solicitada.substring(3,6)) * 60 + parseInt(solicitada.substring(7,8));\n            llegada = parseInt(llegada.substring(0,2)) * 3600 + parseInt(llegada.substring(3,6)) * 60 + parseInt(llegada.substring(7,8));\n            salida = parseInt(salida.substring(0,2)) * 3600 + parseInt(salida.substring(3,6)) * 60 + parseInt(salida.substring(7,8));\n\n            estadia_real = Math.ceil((salida - llegada) / 60);\n\n            if (Math.abs(llegada - solicitada) > 1800) {\n              atraso =  Math.abs((llegada - solicitada) - 1800 ) ; //1800 s = 30 minutos rango puntualidad\n              atraso = Math.ceil(atraso / 60);\n              atraso_suma = atraso_suma + atraso;\n              puntual = \"No\";\n    \n    \n            } else{\n              atraso = 0;\n              puntual = \"Si\";\n            };\n\n            if (estadia_real > estadia_esperada && puntual === \"Si\"){\n              min_adicionales = estadia_real - estadia_esperada;\n              min_adicionales = Math.ceil(min_adicionales);\n              adicionales_suma = adicionales_suma + min_adicionales;\n            } else {\n              min_adicionales = 0;\n            }\n      \n            if (min_adicionales > atraso) {\n              min_diferencia = min_adicionales - atraso;\n            } else {\n              min_diferencia = (atraso - min_adicionales);\n              min_diferencia = min_diferencia + \" Minutos a favor\";\n            }\n      \n            // console.log(\"Puntual? : \", puntual, \" - Atraso: \", atraso, \" - Adicionales: \", min_adicionales);      \n          };\n        };\n      }\n\n      if (estadia_real > estadia_esperada) {\n        var sobrestadia = estadia_real - estadia_esperada;\n      } else {\n        var sobrestadia = 0;\n      }\n      data[x].push(puntual);  \n      data[x].push(atraso);\n      data[x].push(estadia_esperada);\n      data[x].push(estadia_real);\n      data[x].push(sobrestadia);\n    };\n\n    setData(rows);\n\n    // console.log(\"Impuntualidad: \", atraso_suma, \" - Sobrestadia: \", adicionales_suma, \" - Tramos: \", tramos, \" - Monto = \", monto);\n    \n    if (adicionales_suma > atraso_suma) {\n      diferencia = (adicionales_suma - atraso_suma) + \" Minutos\";\n      tramos = Math.floor((adicionales_suma - atraso_suma) / 15);\n      monto = tramos * 0.5;\n    } else {\n      diferencia = \"Acumula \" + (atraso_suma - adicionales_suma) + \" minutos en su próximo pedido\";\n      tramos = 0;\n      monto = 0;\n    }\n\n    resumen = [ obra, atraso_suma, adicionales_suma, diferencia, tramos, monto ];\n    \n    setResumen(resumen);\n    // console.log(resumen);\n  }\n\n\n  const guardarFacturado = async()=>{\n    await axios.get(urlGuardar + resumen[0] + \"/\" + resumen[5] + \"/\" + resumen[3])\n  }\n  // console.log(urlGuardar + resumen[0] + \"/\" + resumen[5]);\n\n  function getFacturado (obra) {\n    const select = async()=>{\n      await axios.get(urlSelect)\n      .then(response=>{\n        setFacturado(response.data);\n      })\n    }\n    \n    let x;\n    var fechasObra = [];\n\n    for (x in facturado) {\n      if ( facturado[x][1] === obra ){\n        fechasObra.push(facturado[x][1]);\n      }\n    }\n\n    setFacturado(fechasObra[fechasObra.length -1]);\n  }\n  \n\n\n  useEffect(()=>{\n    peticionGet();\n  }, [])\n\n\n  return (\n    <div className={classes.root}>\n\n      <Grid item xs = {12}>\n        <Navbar/>\n      </Grid>\n\n\n      <Grid container spacing = {0}>\n        \n        <Grid item xs={12} sm={5} md={5} lg={5} xl={5}>\n          <Card className={classes.card}>\n            <CardContent>\n\n              <Typography className={classes.titulo}>\n                Resumen\n              </Typography>\n\n              <br></br>\n              \n              <Typography className={classes.texto}>\n                Obra:               {resumen[0]}\n              </Typography>\n\n              <Typography className={classes.texto}>\n                Impuntualidad Melón: {resumen[1]} Minutos\n              </Typography>\n\n              <Typography className={classes.texto}>\n                Sobrestadía: {resumen[2]} Minutos\n              </Typography>\n\n              <Typography className={classes.texto}>\n                Diferencia: {resumen[3]}\n              </Typography>\n\n              <Typography className={classes.texto}>\n                Tramos de 15min: {resumen[4]}\n              </Typography>\n\n              <Typography className={classes.texto}>\n                Monto: {resumen[5]} UF\n              </Typography>\n              \n              <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  startIcon={<Receipt />}\n                  onClick={()=> guardarFacturado()}\n                  >\n                  Facturado\n              </Button>\n\n              <Typography className={classes.texto}>\n                Última Facturación: {()=> getFacturado(resumen[0])}\n              </Typography>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={7} md={7} lg={7} xl={7}>\n          <Card className={classes.card}>\n            <CardContent>\n\n              <Typography className={classes.titulo}>\n                Filtros\n              </Typography>\n              \n            <br></br>\n            <br></br>\n            <br></br>\n\n            <Grid item xs={12}>\n              <TextField className={classes.textField}\n                name=\"obra_oc\"\n                label=\"Obra: \"\n                onChange={handleChange}\n                value={obraSeleccionado&&obraSeleccionado.obra_oc}\n              />\n\n              <TextField\n                name=\"fecha_inicio\"\n                label=\"Desde: \"\n                type=\"date\"\n                defaultValue=\"2019-09-13\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={handleChange}\n                value={obraSeleccionado&&obraSeleccionado.fecha_inicio}\n              />\n\n              <TextField\n                name=\"fecha_fin\"\n                label=\"Hasta: \"\n                type=\"date\"\n                defaultValue=\"\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={handleChange}\n                value={obraSeleccionado&&obraSeleccionado.fecha_fin}\n              />\n            </Grid>\n\n            <br></br>\n            <br></br>\n            <br></br>\n\n\n            <Grid item xs={12}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                startIcon={<FilterList />}\n                onClick={()=> (filtrarDatos(data, obraSeleccionado.fecha_inicio, obraSeleccionado.fecha_fin, obraSeleccionado.obra_oc), getFacturado(obraSeleccionado.obra_oc)) }\n              >\n                Filtrar\n              </Button>\n\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<Close />}\n                onClick={()=> peticionGet()}\n              >\n                Limpiar\n              </Button>\n\n            </Grid>\n\n            </CardContent>\n          </Card>\n        </Grid>\n        \n      </Grid>\n\n      <Grid item xs = {12}>\n        <Card className={classes.root}>\n          <CardContent>\n            <MUIDataTable\n              title={\"Pedidos\"}\n              data={data}\n              columns={columnas}\n              options={options}\n            />\n          </CardContent>\n        </Card>\n      </Grid>\n      \n    </div>\n  );\n}\n\nexport default App;","/Users/maymt/Desktop/mvp/src/components/Navbar.js",["18"],"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {AppBar, Toolbar, IconButton, Typography} from '@material-ui/core';\nimport Home from '@material-ui/icons/Home';\nimport logo from '../assets/img/logo-blanco.png';\n\nconst useStyles = makeStyles(()=>({\n\troot: {\n\t\tflexGrow: 1,\n\t\tfixed: 'top'\n\t},\n\thomeButton: {\n\t\tmarginRight: '20px'\n\t},\n\ttitle: {\n\t\tflexGrow: 1,\n\t\tfontWeight: 'bold'\n\t},\n\tborderRadius: '50%'\n}));\n\nfunction Navbar() {\n\tconst classes = useStyles();\n\treturn (\n\t\t<div className = {classes.root}>\n\t\t\t<AppBar position = \"static\" style={{ background: '#006C90'}}>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton edge = \"start\" className = {\"classes.homeButton\"} color = \"inherit\" href = \"http://localhost:3000/\">\n\t\t\t\t\t\t<Home />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<Typography variant=\"h5\" className={classes.title}>\n\t\t\t\t\t\tMVP Sobrestadía\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<IconButton color=\"inherit\">\n\t\t\t\t\t\t<img src={logo} width=\"100px\" height=\"40px\" className={classes.imagen}/>\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t</div>\n\t);\n}\n\nexport default Navbar;",{"ruleId":"19","severity":1,"message":"20","line":144,"column":11,"nodeType":"21","messageId":"22","endLine":144,"endColumn":14},{"ruleId":"19","severity":1,"message":"23","line":149,"column":14,"nodeType":"21","messageId":"22","endLine":149,"endColumn":20},{"ruleId":"24","severity":1,"message":"25","line":239,"column":13,"nodeType":"21","messageId":"26","endLine":239,"endColumn":24},{"ruleId":"19","severity":1,"message":"27","line":275,"column":11,"nodeType":"21","messageId":"22","endLine":275,"endColumn":17},{"ruleId":"28","severity":1,"message":"29","line":298,"column":6,"nodeType":"30","endLine":298,"endColumn":8,"suggestions":"31"},{"ruleId":"32","severity":1,"message":"33","line":421,"column":135,"nodeType":"34","messageId":"35","endLine":421,"endColumn":136},{"ruleId":"36","severity":1,"message":"37","line":35,"column":7,"nodeType":"38","endLine":35,"endColumn":79},"no-unused-vars","'hoy' is assigned a value but never used.","Identifier","unusedVar","'inicio' is assigned a value but never used.","no-redeclare","'sobrestadia' is already defined.","redeclared","'select' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'peticionGet'. Either include it or remove the dependency array.","ArrayExpression",["39"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"40","fix":"41"},"Update the dependencies array to be: [peticionGet]",{"range":"42","text":"43"},[12379,12381],"[peticionGet]"]